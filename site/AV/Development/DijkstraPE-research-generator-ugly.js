class DijkstraInstanceGenerator{constructor(e){this.debug=e;this.lastLinearTransform=-1}randomInt(e,t){return Math.floor(Math.random()*(t-e+1))+1}aax(){function e(e){return Math.floor(Math.random()*e)+1}let t=e(6);let r=e(6);let l=r+e(5);let n=l+e(5);let s=n-l+e(5);let a=s+e(5);let o=l+a-n+e(5);let h=o+e(5);let i=n+h-(l+a)+e(5);let f=l+a+i-(n+h)+e(5);let d=n+h+f-(l+a+i)+e(5);let g=l+a+i+d-(n+h)+e(5);let u=e(9);let c=a-s+e(5);let b=n+h-(l+a)+e(5);let m=a+i-s+e(5);let p=h-o+e(5);let L=h+f-o+e(5);let x=e(9);let v=[t,t+r,t+l,t+n,t+l+s,t+l+a,t+n+o,t+n+h,t+l+a+i,t+n+h+f,t+l+a+i+d,t+n+h+g,t+n+h+g+u];for(let e=1;e<v.length;e++){if(v[e-1]>=v[e]){return undefined}}let M=a<s+c&&n+h<l+a+b&&a+i<s+m&&h<o+p&&m+f<o+L;if(!M){return undefined}return{a:t,b:r,c:l,d:n,e:s,f:a,g:o,h:h,i:p,j:L,k:c,l:b,m:f,n:m,o:i,p:g,q:d,r:u,s:x}}axa(n){const t=16;const e=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P"];let s={vertexLabels:e,edges:new Array(t)};for(let e=0;e<t;e++){s.edges[e]=[]}const r=["AB:a","BC:b","BE:c","BF:d","DH:s","EI:e","EJ:f","FG:g","FK:h","GK:i","GL:j","IJ:k","IN:n","JK:l","JN:o","KL:m","KO:p","MN:q","OP:r"];for(let l of r){let e=l.charCodeAt(0)-65;let t=l.charCodeAt(1)-65;let r=n[l[3]];s.edges[e].push([t,r]);s.edges[t].push([e,r])}return s}xaa(l){this.baa("Vertex labels: "+l.vertexLabels);for(let r=0;r<l.edges.length;r++){let t=[l.vertexLabels[r]," : "];for(let e of l.edges[r]){t.push(l.vertexLabels[e[0]]," ",e[1],", ")}this.baa(t.join(""))}}aba(t,r){if(r.length!=16){throw"Length of sourceArray must be 16."}const l=[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[3,7,11,15,2,6,10,14,1,5,9,13,0,4,8,12],[15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],[12,8,4,0,13,9,5,1,14,10,6,2,15,11,7,3],[12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3],[3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12],[0,4,8,12,1,5,9,13,2,6,10,14,3,7,11,15],[15,11,7,3,14,10,6,2,13,9,5,1,12,8,4,0]];let n=new Array(r.length);for(let e=0;e<r.length;e++){n[e]=r[l[t][e]]}return n}ada(e,t,r){let l=e[t];e[t]=e[r];e[r]=l}dab(e){if(e===undefined){console.warn("dab(undefined)!");return}let t=[...e];let r,l,n;for(r=t.length-1;r>0;r--){l=Math.floor((r+1)*Math.random());this.ada(t,r,l)}return t}daa(t){let r=new Array(t.length);for(let e=0;e<t.length;e++){r[t[e]]=e}return r}dax(t,n){let s={vertexLabels:[...t.vertexLabels],edges:new Array(n.length)};for(let e=0;e<n.length;e++){s.edges[e]=[]}for(let e=0;e<n.length;e++){let l=n[e];for(let r of t.edges[e]){let e=n[r[0]];let t=r[1];s.edges[l].push([e,t])}}return s}daz(t,r){let l=[];for(let e=0;e<t.vertexLabels.length;e++){l.push(t.vertexLabels[r[e]])}t.vertexLabels=l}generateInstance(){const t=100;let r=undefined;for(let e=0;e<t;e++){let e=this.aax();if(e!==undefined){r=this.axa(e);break}}const e=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];let l=this.lastLinearTransform;while(l===this.lastLinearTransform){l=Math.floor(8*Math.random())}this.lastLinearTransform=l;let n=this.aba(l,e);let s=this.dax(r,n);let a=this.daa(n);const o=a.indexOf(0);let h=this.dab(e);let i=h.indexOf(0);this.ada(h,o,i);this.daz(s,h);let f={};for(let e=0;e<s.vertexLabels.length;e++){f[s.vertexLabels[e]]=a[e]}return{graph:s,roleMap:f,startIndex:o}}baa(e){if(this.debug){console.log(e)}}}