{
  "translations" :{
    "en": {
      ".avTitle": "Dijkstra's Algorithm Proficiency Exercise",
      "av_Authors": "Mohammed Fawzi, Kasper Hellström, Ari Korhonen, Johanna Sänger, Artturi Tilanterä, Teemu Taivainen",
      ".instructLabel": "Instructions:",
      ".instructions": "Simulate the execution of Dijkstra’s algorithm for the given graph below. Click on an <strong>edge</strong> (u, v) to either enqueue a corresponding element to the priority queue (PQ) or to update its priority in the PQ. To determine the correct order to process neighbours of each node, use the given adjacency list representation of the graph. Click <strong>Dequeue</strong> to remove the highest priority element from the PQ, and to add the corresponding edge to the spanning tree. Begin from the node A. The table at the bottom keeps track of the known shortest distance from A to each node and the parent node through which this shortest distance is achieved.",
      "av_ms_shortest": "Shortest paths from A.",
      "av_ms_select_a": "Start by selecting node A.",
      "av_ms_select_node": "Select {node}, since it has the shortest distance from A.",
      "av_ms_add_edge": "<span class='action'>Dequeue</span> edge ({from}, {to}). It is added to the spanning tree.",
      "av_ms_unreachable": "The nearest unvisited node is at an infinite distance. The algorithm ends.",
      "av_ms_update_distances": "<span class='action'>Update</span> {node}'s neighbors' distances.<br>For updated nodes, set the parent node to {node}.",
      "av_ms_visit_neighbor_compare": "Update {node}'s neighbors' distances. <span class='compare'>Compare</span> the distance of {neighbor} through {node} to the known shortest distance for {neighbor}.",
      "av_ms_visit_neighbor_add": "The current distance to {neighbor} is infinite. <span class='action'>Enqueue</span> {neighbor} to the priority queue. Set {neighbor}'s parent to {node}.",
      "av_ms_visit_neighbor_update": "The distance to {neighbor} through {node} is shorter than the one previously discovered. <span class='action'>Update</span> the distance in the priority queue. Set {neighbor}'s parent to {node}.",
      "av_ms_visit_neighbor_no_action": "The distance to {neighbor} through {node} is longer or equal than the one previously discovered. No updates needed.",
      "av_update_not_possible": "It is not possible to update a node that does not exist in the priority queue.",
      "av_please_click_edges": "Please, click on the edges, not the nodes.",
      "#help": "Help",
      "#about": "About",
      "reset": "New Exercise",
      "#enqueue": "Enqueue",
      "#update": "Update",
      "#dequeue": "Dequeue",
      "at_distance": " at distance ",
      "priority_queue": "Priority Queue",
      "node": "Node",
      "distance": "Distance",
      "parent": "Parent",
      "edge": "Edge",
      "legend": "Legend",
      "node_explanation": "C has distance 5 from A<br>with parent B",
      "legend_unvisited": "Other",
      "legend_fringe": "Fringe",
      "legend_spanning_tree": "Spanning tree"
    },
    "fi": {
      ".avTitle": "Dijkstran algoritmi",
      "av_Authors": "Mohammed Fawzi, Kasper Hellström, Ari Korhonen, Johanna Sänger, Artturi Tilanterä, Teemu Taivainen",
      ".instructLabel": "Ohjeet:",
      ".instructions": "Simuloi Dijkstran algoritmin suoritusta alla olevalle verkolle. Klikkaa <strong>särmää</strong> (u, v) joko lisätäksesi sitä vastaavan elementin prioriteettijonoon tai päivittääksesi tämän elementin prioriteettia. Määritä oikea järjestys kunkin solmun naapurien läpikäymiseksi käyttämällä annettua verkon seuraajaluetteloesitystä. Klikkaa <strong>Poista</strong> poistaaksesi korkeimman prioriteetin elementin priotiteettijonosta ja lisätäksesi vastaavan särmän virityspuuhun. Aloita solmusta A. Alimmaisena oleva taulukko pitää kirjaa lyhyimmästä tunnetusta etäisyydestä A:sta kullekin solmulle sekä vanhemmista, joiden kautta kulkemalla tämä lyhyin etäisyys saavutetaan.",
      "av_ms_shortest": "Lyhyimmät reitit A:sta.",
      "av_ms_select_a": "Aloita valitsemalla solmu A.",
      "av_ms_select_node": "Valitse {node}, koska sillä on lyhyin etäisyys A:han.",
      "av_ms_add_edge": "<strong>Poista</strong> särmä ({from}, {to}) prioriteettijonosta ja lisää se virityspuuhun.",
      "av_ms_unreachable": "Etäisyys lähimpään solmuun, jossa ei ole vierailtu, on ääretön. Algoritmi päättyy.",
      "av_ms_update_distances": "Päivitä {node}:n naapurien etäisyydet.<br>Aseta päivitettyjen solmujen vanhemmaksi {node}.",
      "av_ms_visit_neighbor_compare": "Päivitä {node}:n naapureiden etäisyydet. <span class='compare'>Vertaile</span> etäisyyttä solmuun {neighbor} solmun {node} kautta tunnettuun lyhyimpään etäisyyteen {neighbor}:lle",
      "av_ms_visit_neighbor_add": "Nykyinen etäisyys solmulle {neighbor} on ääretön. <strong>Lisää</strong> {neighbor} prioriteettijonoon. Aseta {neighbor}:n vanhemmaksi {node}.",
      "av_ms_visit_neighbor_update": "Etäisyys solmuun {neighbor} solmun {node} kautta on lyhyempi kuin aiemmin löydetty. <strong>Päivitä</strong> etäisyys prioriteettijonoon. Aseta {neighbor}:n vanhemmaksi {node}.",
      "av_ms_visit_neighbor_no_action": "Etäisyys solmuun {neighbor} solmun {node} kautta on yhtä suuri tai suurempi kuin aiemmin havaittu. Ei tarvetta päivityksille.",
      "av_update_not_possible": "Ei ole mahdollista päivittää solmua, joka ei ole prioriteettijonossa.",
      "av_please_click_edges": "Ole hyvä ja klikkaa kaarta, ei solmua.",
      "#help": "Ohje",
      "#about": "Lisätietoa",
      "reset": "Uusi tehtävä",
      "#enqueue": "Lisää",
      "#update": "Päivitä",
      "#dequeue": "Poista",
      "at_distance": " etäisyydellä ",
      "priority_queue": "Prioriteettijono",
      "node": "Solmu",
      "distance": "Etäisyys",
      "parent": "Vanhempi",
      "edge": "Särmä",
      "legend": "Selite",
      "node_explanation": "C:n etäisyys A:sta on 5<br>vanhemman B kautta",
      "legend_unvisited": "Muu",
      "legend_fringe": "Reunus",
      "legend_spanning_tree": "Virityspuu"
    }
  },
  "params": {
    "JXOP-feedback": "continuous",
    "JXOP-fixmode": "fix"
  }
}
